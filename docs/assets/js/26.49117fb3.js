(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{362:function(s,t,a){"use strict";a.r(t);var n=a(12),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"_1-select-语句"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-select-语句"}},[s._v("#")]),s._v(" 1.SELECT 语句")]),s._v(" "),t("p",[s._v("MySQL 的 SELECT 语句用于从数据库表中检索数据。功能强大，语句结构复杂多样。不过基本的语句格式像下面这个样子。")]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("列名称"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("表名称"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("条件"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])])]),t("p",[s._v("一个完整的 SELECT 语句包含一些可选的子句。SELECT 语句定义如下：")]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" clause\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" clause"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" clause"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("GROUP")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" clause"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("HAVING")]),s._v(" clause"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ORDER")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" clause"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("LIMIT")]),s._v(" clause"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])])]),t("ol",[t("li",[s._v("SELECT 子句是必选的，其它子句是可选的。")])]),s._v(" "),t("p",[s._v("一个 SELECT 可以在不引用任何表的情况下进行计算，也就是没有其他任何字句，只有 SELECT 子句。")]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" sum"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-----+")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" sum "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-----+")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-----+")]),s._v("\n")])])]),t("ol",{attrs:{start:"2"}},[t("li",[s._v("一个 SELECT 语句中，子句的顺序是固定的。如 GROUP BY 子句不会位于 WHERE 子句前面。")]),s._v(" "),t("li",[s._v("SELECT 语句不同子句的执行顺序：")])]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[s._v("开始 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v("子句 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v("子句 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("GROUP")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v("子句 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("HAVING")]),s._v("子句 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v("子句 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ORDER")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v("子句 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("LIMIT")]),s._v("子句 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" 最终结果\n")])])]),t("p",[s._v("每个子句执行后都会产生一个中间数据结果，即所谓的临时视图，供接下来的子句使用，如果不存在某个子句则跳过。")]),s._v(" "),t("p",[s._v("需要注意的是，不同的数据库管理系统可能会有一些差异，但一般情况下，上述顺序适用于大多数SQL查询。")]),s._v(" "),t("p",[s._v("MySQL 和标准 SQL 执行顺序基本是一样的。")]),s._v(" "),t("h2",{attrs:{id:"_2-select-子句"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-select-子句"}},[s._v("#")]),s._v(" 2.SELECT 子句")]),s._v(" "),t("p",[s._v("SELECT 子句用于指定要选择的列或使用表达式生成新的值。")]),s._v(" "),t("p",[s._v("对于所选数据，还可以添加一些修饰，比如使用 DISTINCT 关键字用于去重。")]),s._v(" "),t("p",[s._v("一个完整的 SELECT 子句组成如下。")]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ALL")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DISTINCT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DISTINCTROW")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("HIGH_PRIORITY"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("STRAIGHT_JOIN"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("SQL_SMALL_RESULT"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("SQL_BIG_RESULT"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("SQL_BUFFER_RESULT"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("SQL_NO_CACHE"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("SQL_CALC_FOUND_ROWS"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n    select_expr "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" select_expr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("into_option"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\ninto_option: {\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INTO")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("OUTFILE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'file_name'")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CHARACTER")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SET")]),s._v(" charset_name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n        export_options\n  "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INTO")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DUMPFILE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'file_name'")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INTO")]),s._v(" var_name "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" var_name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n}\n")])])]),t("p",[s._v("其中 select_expr 是必选的，表示要查询的列、表达式或使用 * 表示所有列。")]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" t1 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INNER")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("JOIN")]),s._v(" t2 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n")])])]),t("p",[s._v("可以对列使用函数进行运算，并使用 AS 关键字对结果列命名（AS 是可选的，可以省略）。")]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("AVG")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("score"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" avg_score"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" t1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" t1 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 或")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("AVG")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("score"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" avg_score"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" t1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" t1 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n")])])]),t("h2",{attrs:{id:"_3-from-子句"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-from-子句"}},[s._v("#")]),s._v(" 3.FROM 子句")]),s._v(" "),t("p",[s._v("FROM 子句指示要从中检索行的表。如果为多个表命名，则执行连接。对于指定的每个表，您可以选择指定一个别名。")]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" table_references "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("PARTITION")]),s._v(" partition_list"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])])]),t("p",[s._v("SELECT 支持显式分区选择，使用 PARTITION 子句，在 table_references 表的名称后面跟着一个分区或子分区列表(或两者都有)在这种情况下，只从列出的分区中选择行，而忽略表的任何其他分区。关于分区可参考 "),t("a",{attrs:{href:"https://dev.mysql.com/doc/refman/8.1/en/partitioning.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("Chapter 24 Partitioning"),t("OutboundLink")],1),s._v("。")]),s._v(" "),t("h2",{attrs:{id:"_4-where-子句"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-where-子句"}},[s._v("#")]),s._v(" 4.WHERE 子句")]),s._v(" "),t("p",[s._v("如果给定 WHERE 子句，则指示行必须满足的一个或多个条件才能被选中。where_condition 是一个表达式，对于要选择的每一行，其计算结果为 true 才会被选择。如果没有 WHERE 子句，将选择所有行。")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("[WHERE condition]\n")])])]),t("p",[s._v("下面的运算符可在 WHERE 子句的条件表达式中使用。")]),s._v(" "),t("table",[t("thead",[t("tr",[t("th",[s._v("运算符")]),s._v(" "),t("th",[s._v("描述")])])]),s._v(" "),t("tbody",[t("tr",[t("td",[s._v("=")]),s._v(" "),t("td",[s._v("等于")])]),s._v(" "),t("tr",[t("td",[s._v("!= 或 <>")]),s._v(" "),t("td",[s._v("不等于")])]),s._v(" "),t("tr",[t("td",[s._v(">")]),s._v(" "),t("td",[s._v("大于")])]),s._v(" "),t("tr",[t("td",[s._v("<")]),s._v(" "),t("td",[s._v("小于")])]),s._v(" "),t("tr",[t("td",[s._v(">=")]),s._v(" "),t("td",[s._v("大于等于")])]),s._v(" "),t("tr",[t("td",[s._v("<=")]),s._v(" "),t("td",[s._v("小于等于")])]),s._v(" "),t("tr",[t("td",[s._v("BETWEEN AND")]),s._v(" "),t("td",[s._v("在某个范围内（闭区间）")])]),s._v(" "),t("tr",[t("td",[s._v("LIKE")]),s._v(" "),t("td",[s._v("搜索某种模式")])]),s._v(" "),t("tr",[t("td",[s._v("AND")]),s._v(" "),t("td",[s._v("多个条件与")])]),s._v(" "),t("tr",[t("td",[s._v("OR")]),s._v(" "),t("td",[s._v("多个条件或")])])])]),s._v(" "),t("p",[s._v("（1）WHERE IN 的用法")]),s._v(" "),t("p",[s._v("IN 在 WHERE 子句中的用法主要有两种：")]),s._v(" "),t("ul",[t("li",[s._v("IN 后面是子查询产生的记录集，注意，子查询结果数据列只能有一列且无需给子查询的结果集添加别名。")])]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" tbl_name1 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" col_name1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("IN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" col_name2 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" tbl_name2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n")])])]),t("ul",[t("li",[s._v("IN 后面是数据集合。")])]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("SELECT * FROM  tbl_name  WHERE  col_name  IN ('foo', 'bar', 'baz', 'qux'); \n")])])]),t("p",[s._v("注意：如果数据类型是字符串，一定要将字符串用单引号引起来。")]),s._v(" "),t("h2",{attrs:{id:"_5-group-by-子句"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-group-by-子句"}},[s._v("#")]),s._v(" 5.GROUP BY 子句")]),s._v(" "),t("p",[s._v("GROUP BY 子句中的数据列应该是 SELECT 指定的数据列中的所有列，除非这列是用于聚合函数，如 SUM()、AVG()、COUNT()等。")]),s._v(" "),t("p",[s._v("但是，如果 SELECT 指定的数据列，没有用于聚合函数也不在 GROUP BY 子句中，按理说会报错，但是 MySQL 会选择第一条显示在结果集中。")]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 选择发起加好友请求次数超过10次的QQ(uin)，被加方（to_uin）只会显示第一个")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" uin"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" to_uin"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("count")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" cnt "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" inner_raw_add_friend_20170514 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("GROUP")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" uin "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("HAVING")]),s._v(" cnt"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("h2",{attrs:{id:"_6-having-子句"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-having-子句"}},[s._v("#")]),s._v(" 6.HAVING 子句")]),s._v(" "),t("p",[s._v("HAVING 和 WHERE 子句一样，用于指定选择条件。但 HAVING 和 WHERE 子句的用法上却有明显的区别。")]),s._v(" "),t("ol",[t("li",[s._v("作用的对象不同。")])]),s._v(" "),t("p",[s._v("WHERE 作用于表和视图，HAVING 作用于组。")]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查询 QQ 3585076592 和 3585075773 在 20170514 当天加好友请求次数且请求次数>10")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" uin"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("count")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" cnt\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" inner_raw_add_friend_20170514\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" uin"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3585076592")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("OR")]),s._v(" uin"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3585075773")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("GROUP")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" uin "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("HAVING")]),s._v(" cnt"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("ol",{attrs:{start:"2"}},[t("li",[s._v("作用的阶段不同。")])]),s._v(" "),t("p",[s._v("WHERE 在分组和聚集计算之前选取输入行（因此，它控制哪些行进入聚集计算），而 HAVING 在分组和聚集之后选取分组。因此，WHERE 子句不能包含聚集函数，因为试图用聚集函数判断哪些行输入给聚集运算是没有意义的。 相反，HAVING 子句一般包含聚集函数。当然，也可以使用 HAVING 对结果集进行筛选，但不建议这样做，同样的条件可以更有效地用于 WHERE 阶段。")]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查询指定 QQ 加好友请求信息（where作用于输入阶段的数据集）")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" inner_raw_add_friend_20170514 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" uin"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3585078528")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 作用等同于 WHERE， 但 HAVING 作用于结果阶段的结果集")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" inner_raw_add_friend_20170514 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("HAVING")]),s._v(" uin"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3585078528")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("h2",{attrs:{id:"_7-order-by-子句"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-order-by-子句"}},[s._v("#")]),s._v(" 7.ORDER BY 子句")]),s._v(" "),t("p",[s._v("ORDER BY 子句用于根据指定的列对结果集进行排序。")]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ORDER")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" {col_name "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" expr "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" position} "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ASC")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DESC")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WITH ROLLUP")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])])]),t("p",[s._v("ORDER BY 语句默认按照升序 ASC（ascend）对记录进行排序。如果希望按照降序排序，可以使用 DESC（descend）关键字，随机使用随机数函数"),t("code",[s._v("RAND()")]),s._v("。")]),s._v(" "),t("p",[s._v("在指定待排序的列时，不建议使用列位置（从1开始），因为该语法已从SQL标准中删除。")]),s._v(" "),t("p",[s._v("比如以 QQ 号码降序排序。")]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" inner_raw_add_friend_20170514 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ORDER")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" uin "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DESC")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("h2",{attrs:{id:"_8-limit-子句"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-limit-子句"}},[s._v("#")]),s._v(" 8.LIMIT 子句")]),s._v(" "),t("p",[s._v("LIMIT 子句可以被用于强制 SELECT 语句返回指定的记录数。")]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("LIMIT")]),s._v(" {"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("offset")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" row_count "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" row_count "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("OFFSET")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("offset")]),s._v("}"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])])]),t("p",[s._v("LIMIT 接受一个或两个数值参数。参数必须是一个整数常量。如果给定两个参数，有两种用法。")]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("offset")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("row_count\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 或")]),s._v("\nrow_count "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("OFFSET")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("offset")]),s._v("\n")])])]),t("p",[s._v("offset 为返回记录行的开始偏移量，从 0 开始，row_count 为返回记录行的最大数目。")]),s._v(" "),t("p",[s._v("只给一个参数，表示返回记录行的 Top 最大行数，起始偏移量默认为 0。")]),s._v(" "),t("p",[s._v("返回从起始偏移量开始，返回剩余所有的记录，可以使用一些值很大的第二个参数。如检索所有从第 96 行到最后一行。")]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" tbl "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("LIMIT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("95")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("18446744073709551615")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("p",[s._v("注意，MySQL目前不支持使用 -1 表示返回从偏移量开始剩余的所有记录，即下面的写法是错误的：")]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" tbl "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("LIMIT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("95")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n")])])]),t("h2",{attrs:{id:"_9-distinct-子句"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9-distinct-子句"}},[s._v("#")]),s._v(" 9.DISTINCT 子句")]),s._v(" "),t("p",[s._v("DISTINCT 关键字用于查询结果中去除重复的行，只返回唯一的行。")]),s._v(" "),t("p",[s._v("（1）利用 DISTINCT 结合 COUNT() 函数可以统计不重复记录的数量。")]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 选择每一个 QQ 发起加好友请求涉及到的不同的 QQ 数")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" uin"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("count")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("distinct")]),s._v(" to_uin"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" c "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" add_friend "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("GROUP")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" uin"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("p",[s._v("（2）DISTINCT 用于选择不同的记录，且只能放在所选列的开头，作用于紧随其后的所有列。")]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查询 uin 和 to_uin 不重复的加好友请求")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DISTINCT")]),s._v(" uin"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" to_uin "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" add_friend"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 示例数据表")]),s._v("\nuin      to_uin\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10000")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("123456")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10000")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("121212")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10001")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("121212")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10001")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("131313")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 结果集")]),s._v("\nuin      to_uin\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10000")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("123456")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10000")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("121212")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10001")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("121212")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10001")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("131313")]),s._v("\n")])])]),t("p",[s._v("如果想使 DISTINCT 的功能作用于第二列的 to_uin，使用 DISTINCT 是无望了，因为 MySQL 语法尚不支持，可以使用 GROUP BY 取而代之。")]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" uin"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" to_uin "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" add_friend "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("GROUP")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" to_uin"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 结果集")]),s._v("\nuin      to_uin\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10000")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("123456")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10000")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("121212")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10001")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("131313")]),s._v("\n")])])]),t("p",[s._v("该奇技淫巧只能用在 MySQL，因为标准的 SQL 语法规定非聚合函数中的列一定要在 GROUP BY 子句中。MySQL 规定，当非聚合函数中的列不存在于 GROUP BY 子句中，则选择每个分组的第一行。")]),s._v(" "),t("p",[s._v("（3）COUNT DISTINCT 统计符合条件的记录数量。")]),s._v(" "),t("p",[s._v("如果像对符合条件的记录进行 COUNT DISTINCT，那么如何添加条件呢？")]),s._v(" "),t("p",[s._v("参见 "),t("a",{attrs:{href:"https://stackoverflow.com/questions/19672001/mysql-distinct-count-if-conditions-unique",target:"_blank",rel:"noopener noreferrer"}},[s._v("MySQL distinct count if conditions unique"),t("OutboundLink")],1),s._v("，可以使用下面的方法。")]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("COUNT")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DISTINCT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CASE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" 条件 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("THEN")]),s._v(" 字段 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("END")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),t("p",[s._v("参见 "),t("a",{attrs:{href:"http://blog.csdn.net/john1337/article/details/70140799",target:"_blank",rel:"noopener noreferrer"}},[s._v("mysql count if distinct"),t("OutboundLink")],1),s._v("，也可以使用下面这种方法。")]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("COUNT")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DISTINCT")]),s._v(" col_name1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("IF")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("col_name2"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),t("h2",{attrs:{id:"_10-union-子句"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_10-union-子句"}},[s._v("#")]),s._v(" 10.UNION 子句")]),s._v(" "),t("p",[s._v("UNION 的作用是将两次或多次查询结果纵向合并起来。")]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[s._v("query_expression_body "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("UNION")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ALL")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DISTINCT")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" query_block\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("UNION")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ALL")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DISTINCT")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" query_expression_body"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])])]),t("p",[s._v("下面是一个示例。")]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[s._v("mysql"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("---+---+")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("---+---+")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("---+---+")]),s._v("\nmysql"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'a'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'b'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("---+---+")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" b "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("---+---+")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" b "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("---+---+")]),s._v("\nmysql"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("UNION")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'a'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'b'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("---+---+")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("---+---+")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" b "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("---+---+")]),s._v("\n")])])]),t("p",[s._v("使用 UNION 需要注意以下几点。")]),s._v(" "),t("p",[s._v("（1）UNION 的使用条件")]),s._v(" "),t("p",[s._v("UNION 只能作用于结果集，不能直接作用于原表。结果集的列数相同就可以，即使字段类型不相同也可以使用。值得注意的是 UNION 后字段的名称以第一条 SQL 为准。")]),s._v(" "),t("p",[s._v("（2）UNION 与 UNION ALL 的区别")]),s._v(" "),t("p",[s._v("UNION 用于合并两个或多个 SELECT 语句的结果集，并消去合并后的重复行。UNION ALL 则保留重复行。")]),s._v(" "),t("p",[s._v("（3）关于 UNION 的排序")]),s._v(" "),t("p",[s._v("有两张表，内容如下：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("# table1\nuin\t\tnickname\n10001\tmonkey\n10002\tmonkey king\n\n# table2\nuin\t\tnickname\n20000\tcat\n20001\tdog\n")])])]),t("p",[s._v("对两个结果集按照 uin 进行降序排序后再联合。")]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" table1 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ORDER")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" uin "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DESC")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("UNION")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" table2 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ORDER")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" uin "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DESC")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\nuin\t\tnickname\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10001")]),s._v("\tmonkey\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10002")]),s._v("\tmonkey king\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("20000")]),s._v(" \tcat\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("20001")]),s._v(" \tdog\n")])])]),t("p",[s._v("可以发现，内层排序没有发生作用，那现在试试在外层排序。")]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" table1 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("UNION")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" table2 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ORDER")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" uin "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DESC")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\nuin\t\tnickname\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("20001")]),s._v(" \tdog\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("20000")]),s._v(" \tcat\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10002")]),s._v("\tmonkey king\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10001")]),s._v("\tmonkey\n")])])]),t("p",[s._v("可见外层排序发生了作用。那是不是内层排序就没有用了呢，其实换个角度想想内层先排序，如果外层又排序，明显内层排序显得多余，所以 MySQL 优化了 SQL 语句，不让内层排序起作用。要想内层排序起作用，必须要使内层排序的结果能影响最终的结果，如加上 LIMIT。")]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" table1 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ORDER")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" uin "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DESC")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("LIMIT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("UNION")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" table2 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ORDER")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" uin "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DESC")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("LIMIT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\nuin\t\tnickname\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10002")]),s._v("\tmonkey king\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10001")]),s._v("\tmonkey\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("20001")]),s._v(" \tdog\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("20000")]),s._v(" \tcat\n")])])]),t("p",[s._v("此外，UNION 与 JOIN 在使用时，有一个本质区别我们必须知道。")]),s._v(" "),t("p",[s._v("UNION 只能作用于 SELECT 结果集，不能直接作用于数据表，而 JOIN 则恰恰相反，只作用于数据表，不能直接作用于 SELECT 结果集（可以将 SELECT 结果集指定别名作为派生表）。")]),s._v(" "),t("h2",{attrs:{id:"_11-查看数据表记录数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_11-查看数据表记录数"}},[s._v("#")]),s._v(" 11.查看数据表记录数")]),s._v(" "),t("p",[s._v("查看数据表行数有多种方法。")]),s._v(" "),t("ol",[t("li",[s._v("使用 COUNT(*)")])]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("COUNT")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" tbl_name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("p",[s._v("对于 MyISAM 数据表很快，建议使用，因为 MyISAM 数据表事先将行数缓存起来，可直接获取。InnoDB 数据表不建议使用，当数据表行数过大时，因需要扫描全表，查询较慢。")]),s._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[s._v("查看系统表 information_schema.TABLES")])]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" table_rows\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" information_schema"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TABLES")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" TABLE_SCHEMA"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'db_name'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("AND")]),s._v(" TABLE_NAME"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'tbl_name'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("p",[s._v("information_schema 是 MySQL 中的一个系统数据库，它包含了关于数据库、表、列等元数据信息。可以通过查询 information_schema.TABLES 表可以获取指定数据表的记录数。")]),s._v(" "),t("ol",{attrs:{start:"3"}},[t("li",[s._v("使用 SHOW TABLE STATUS 命令")])]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SHOW")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TABLE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("STATUS")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("LIKE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'tbl_name'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("p",[s._v("需要注意的是，SHOW TABLE STATUS 命令返回的行数是一个近似值，并不是实时的准确值。这是因为 MySQL 在某些情况下会对行数进行估算，而不是实时计算。如果需要准确的行数，建议使用 COUNT(*) 函数或查询 information_schema.TABLES 视图。")]),s._v(" "),t("h2",{attrs:{id:"_12-检查查询语句的执行效率"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_12-检查查询语句的执行效率"}},[s._v("#")]),s._v(" 12.检查查询语句的执行效率")]),s._v(" "),t("p",[s._v("EXPLAIN 是一个用于查询优化的工具，它可以提供有关 SELECT 查询的执行计划的详细信息。通过使用 EXPLAIN 命令，可以了解 MySQL 是如何执行查询的，包括使用的索引、连接类型、扫描的行数等。")]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[s._v("{"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPLAIN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DESCRIBE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DESC")]),s._v("} select_statement"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("p",[s._v("EXPLAIN 命令的输出结果包含以下列：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("id：查询的标识符，用于标识查询中的每个步骤。\nselect_type：查询的类型，如 SIMPLE（简单查询）、PRIMARY（主查询）、SUBQUERY（子查询）等。\ntable：查询涉及的表。\npartitions：查询涉及的分区。\ntype：访问表的方式，如 ALL（全表扫描）、INDEX（使用索引扫描）、RANGE（范围扫描）等。\npossible_keys：可能使用的索引。\nkey：实际使用的索引。\nkey_len：使用的索引的长度。\nref：与索引比较的列或常量。\nrows：扫描的行数。\nfiltered：过滤的行百分比。\nExtra：额外的信息，如使用了临时表、使用了文件排序等。\n")])])]),t("h2",{attrs:{id:"_13-查看-sql-执行时的警告"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_13-查看-sql-执行时的警告"}},[s._v("#")]),s._v(" 13.查看 SQL 执行时的警告")]),s._v(" "),t("p",[s._v("SHOW WARNINGS 是一个用于查看最近一次执行的语句产生的警告信息的命令。在 MySQL 中，警告（Warning）是一种表示潜在问题或异常情况的消息，它不会导致语句的执行失败，但可能会影响到查询结果或性能。")]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SHOW")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WARNINGS")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("p",[s._v("SHOW WARNINGS 命令的输出结果包含以下列：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("Level：警告的级别，如 Warning、Note 等。\nCode：警告的代码。\nMessage：警告的具体消息。\n")])])]),t("p",[s._v("通过查看警告信息，可以了解到语句执行过程中可能存在的问题或异常情况，如截断数据、丢失数据等。根据警告信息，可以进行相应的调整和处理，以确保查询的正确性和性能。")]),s._v(" "),t("h2",{attrs:{id:"_14-查看自增主键最大值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_14-查看自增主键最大值"}},[s._v("#")]),s._v(" 14.查看自增主键最大值")]),s._v(" "),t("ul",[t("li",[s._v("使用 MAX 函数。")])]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("MAX")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" your_table_name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("ul",[t("li",[s._v("查看表状态")])]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SHOW")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TABLE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("STATUS")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("LIKE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'your_table_name'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("p",[s._v("在查询结果中，您可以查找 Auto_increment 列，它将显示自增主键的下一个值。")]),s._v(" "),t("hr"),s._v(" "),t("h2",{attrs:{id:"参考文献"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考文献"}},[s._v("#")]),s._v(" 参考文献")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://dev.mysql.com/doc/refman/8.0/en/select.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("MySQL 8.0 Reference Manual :: 13.2.13 SELECT Statement"),t("OutboundLink")],1)]),s._v(" "),t("p",[t("a",{attrs:{href:"https://dev.mysql.com/doc/refman/8.0/en/union.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("MySQL 8.0 Reference Manual :: 13.2.18 UNION Clause"),t("OutboundLink")],1)]),s._v(" "),t("p",[t("a",{attrs:{href:"https://dev.mysql.com/doc/refman/8.0/en/join.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("MySQL 8.0 Reference Manual :: 13.2.13.2 JOIN Clause"),t("OutboundLink")],1)]),s._v(" "),t("p",[t("a",{attrs:{href:"https://dev.mysql.com/doc/refman/8.0/en/explain.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("MySQL 8.0 Reference Manual :: 13.8.2 EXPLAIN Statement"),t("OutboundLink")],1)]),s._v(" "),t("p",[t("a",{attrs:{href:"https://dev.mysql.com/doc/refman/8.1/en/using-explain.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("8.8.1 Optimizing Queries with EXPLAIN"),t("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=e.exports}}]);